
<div class="header">
	<h1>RaddyAtor</h1>

</div>

<div class="hidden path">
<%= @path %>
</div>

<div class="row-eq-height">

	<div class="cent tbg col-lg-3 col-md-12">
		
				<span>
					<button type="button" class="up btn btn-danger">Increase Temp</button>
				</span>
				<br>
				<span>
					<button type="button" class="down btn btn-primary">Decrease Temp</button>
				</span>

	</div>

	<div class="cent tbg col-lg-3 col-md-12">
			Setpoint: 
			
			<h1 class="csp">
				<%= @setpoint %>°
			</h1>
			
			Range: ± <%= @range %> °

			<% if @heating %>
				Heating 
			<% end %>
			diff: <%= @diff %>
	</div>

	<div class="cent tbg col-lg-3 col-md-12">

			Current Indoor Temp: 
			<h1 class="cit">
				<%= @current_inside.temp %>°
			</h1><br>
			Humidity: <%= @current_inside.humidity %><br>
			Updated at <%= @current_inside.created_at %>

	</div>

	<div class="cent tbg col-lg-3 col-md-12">

			Outside:<br>


			<h1 class="current-temp">--</h1>



			<h2 class="current-weather">--</h2>

	</div>


</div> <!-- end row -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.js"></script>

<div class="chart tbg">
<canvas id="myChart" width="900px" height="300px"></canvas>
</div>

<script>
// Get context with jQuery - using jQuery's .get() method.
var ctx = $("#myChart").get(0).getContext("2d");
// This will get the first returned node in the jQuery collection.


var data = {
    labels: [ 
    	<% @chart_data.each do |d| %>
    		"<%= d.created_at %>", 
    	<% end %> "now"

    ],
    datasets: [
        {
            label: "My First dataset",
            fillColor: "rgba(220,220,220,0.2)",
            strokeColor: "rgba(220,220,220,1)",
            pointColor: "rgba(220,220,220,1)",
            pointStrokeColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(220,220,220,1)",
            data: [<% @chart_data.each do |d| %>
    				<%= d.temp %>,<% end %> 0]
        },
        {
            label: "My Second dataset",
            fillColor: "rgba(151,187,205,0.2)",
            strokeColor: "rgba(151,187,205,1)",
            pointColor: "rgba(151,187,205,1)",
            pointStrokeColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(151,187,205,1)",
            data: [
            	<% @chart_data.each do |d| %><%= d.humidity %>,<% end %> 0]
        }
    ]
};
var options = {

    ///Boolean - Whether grid lines are shown across the chart
    scaleShowGridLines : true,

    //String - Colour of the grid lines
    scaleGridLineColor : "rgba(0,0,0,.05)",

    //Number - Width of the grid lines
    scaleGridLineWidth : 1,

    //Boolean - Whether to show horizontal lines (except X axis)
    scaleShowHorizontalLines: true,

    //Boolean - Whether to show vertical lines (except Y axis)
    scaleShowVerticalLines: true,

    //Boolean - Whether the line is curved between points
    bezierCurve : true,

    //Number - Tension of the bezier curve between points
    bezierCurveTension : 0.4,

    //Boolean - Whether to show a dot for each point
    pointDot : true,

    //Number - Radius of each point dot in pixels
    pointDotRadius : 4,

    //Number - Pixel width of point dot stroke
    pointDotStrokeWidth : 1,

    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
    pointHitDetectionRadius : 20,

    //Boolean - Whether to show a stroke for datasets
    datasetStroke : true,

    //Number - Pixel width of dataset stroke
    datasetStrokeWidth : 2,

    //Boolean - Whether to fill the dataset with a colour
    datasetFill : true,

  

};
var myLineChart = new Chart(ctx).Line(data, options);
</script>


	

